// Generated by CoffeeScript 1.4.0
(function() {
  var MAX_ITEMS, PUBDIR, app, async, cors, express, expressWinston, http, schema, winston, _;

  express = require("express");

  http = require("http");

  _ = require("./underscoreExt");

  winston = require("winston");

  expressWinston = require("express-winston");

  async = require("async");

  cors = require("connect-xcors");

  schema = require("./schema");

  app = express();

  console.log(process.env.NODE_ENV);

  MAX_ITEMS = 1000000;

  app.set("name", "Schematic Ipsum");

  app.set("port", process.env.PORT || 3000);

  app.use(express.logger("dev"));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(cors());

  // view engine setup
    var favicon = require('serve-favicon');
    var path = require('path');
  app.set('views', path.join(__dirname, 'views'));
  app.set('view engine', 'jade');

  // uncomment after placing your favicon in /public
  app.use(favicon(__dirname + '/public/favicon.ico'));
  app.use(express.static(path.join(__dirname, 'public')));

  app.use(app.router);

  app.use(express.errorHandler());

  app.post("/", function(req, res) {
    return async.waterfall([
      function(done) {
        if ((!(req.body != null)) || (_.isEmpty(req.body))) {
          return done("Request missing body, which should be JSON schema.");
        } else {
          return done(null);
        }
      }, function(done) {
        var _base, _ref;
        if ((_ref = (_base = req.query).n) == null) {
          _base.n = 1;
        }
        req.query.n = parseInt(req.query.n);
        if (!_.isNumber(req.query.n)) {
          return done("Query param \"n\" must be a number, you sent " + req.query.n);
        } else if (!(req.query.n > 0 && req.query.n <= MAX_ITEMS)) {
          return done("Query param \"n\" must be between 0 and " + MAX_ITEMS);
        } else {
          return done(null);
        }
      }, function(done) {
        return done(schema.validate(req.body));
      }, function(done) {
        return schema.genIpsums(req, res, req.query.n, done);
      }
    ], function(err, ipsums) {
      var response;
      if (err != null) {
        console.error(err);
        return res.send(400, err);
      } else {
        res.statusCode = 200;
        return res.end();
      }
    });
  });

  http.createServer(app).listen(app.get("port"), function() {
    return console.log("" + (app.get("name")) + " listening on port " + (app.get("port")));
  });

}).call(this);
